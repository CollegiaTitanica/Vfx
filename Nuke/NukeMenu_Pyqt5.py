import sys,os
import subprocess
sys.path.append(r"\\fs3\Sh1\uber\Nuke_Scripts")
sys.path.append(r"\\fs3\Sh1\uber\Nuke_Scripts\NukeScripts")
from NukeMenu_Pyqt5_UI import Ui_Main


from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtGui import QFont,QIcon,QGuiApplication
from PyQt5.QtCore import Qt
#from PyQt5 import QtCore, QtGui, QtWidgets


#sys.path.append(r"\\fs3\Sh1\uber\Nuke_Scripts\NukeScripts")
from Nuke_Preview_v016 import *
from Undist_Crop import *
from Create_Nuke_File_LD_MIXED import *
from Create_Nuke_File_LD_to_UV import *
#from Undist_Crop import Find_JPG
# Form implementation generated from reading ui file 'NukeMenu.ui'
#
# Created by: PyQt6 UI code generator 6.2.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

# ThreeD_comp_Path,render_Path,jpg_Path,ShotName,Version
#file_interface = os.path.join(r"\\fs3\Sh1\uber\Nuke_Scripts\NukeScripts\\", "NukeMenu4.ui")

ThreeD_comp_Path = str(sys.argv[1])
render_Path = str(sys.argv[2])
jpg_Path = str(sys.argv[3])
ShotName = str(sys.argv[4])
Version = str(sys.argv[5])

#ThreeD_comp_Path = r"\\fs3\TPN\Framestore\HOS\3d_comp\lof108_0300_v0043"
#render_Path = r"\\fs3\TPN\Framestore\HOS\render\lof108_0300_v0043"
#jpg_Path = r"\\fs3\TPN\Framestore\HOS\source\lof108_0300_v0043\jpg"
#ShotName = "lof108_0300_v0043"
#Version = "v001"

#---------------------------------------------------------
class MyWindow(QMainWindow):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)
        #self.main_widget = QtCompat.loadUi(file_interface)
        self.main_widget = Ui_Main()
        self.main_widget.setupUi(self)
        self.main_widget.Version.setStyleSheet("QComboBox\n"
        "{\n"
        "    subcontrol-origin: padding;\n"
        "    subcontrol-position: top right;\n"
        "    selection-background-color: #111;\n"
        "    selection-color: yellow;\n"
        "    color: white;\n"
        "    font: 10pt 'Candara';\n"
        "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);\n"
        "    border-style: solid;\n"
        "    border: 1px solid #1e1e1e;\n"
        "    border-radius: 5;\n"
        "    padding: 1px 0px 1px 20px;\n"
        "}\n"
        "\n"
        "\n"
        "QComboBox:hover, QPushButton:hover\n"
        "{\n"
        "    border: 1px solid yellow;\n"
        "    color: white;\n"
        "}\n"
        "\n"
        "QComboBox:editable {\n"
        "    background: red;\n"
        "    color: pink;\n"
        "}\n"
        "\n"
        "QComboBox:on\n"
        "{\n"
        "    padding-top: 0px;\n"
        "    color: white;\n"
        "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #2d2d2d, stop: 0.1 #2b2b2b, stop: 0.5 #292929, stop: 0.9 #282828, stop: 1 #252525);\n"
        "    selection-background-color: #ffaa00;\n"
        "}\n"
        "\n"
        "QComboBox:!on\n"
        "{\n"
        "    color: white;\n"
        "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #666, stop: 0.1 #555, stop: 0.5 #555, stop: 0.9 #444, stop: 1 #333);\n"
        "}\n"
        "\n"
        "QComboBox QAbstractItemView\n"
        "{\n"
        "    border: 2px solid darkgray;\n"
        "    color: black;\n"
        "    selection-background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #111, stop: 1 #333);\n"
        "}\n"
        "\n"
        "QComboBox::drop-down\n"
        "{\n"
        "     subcontrol-origin: padding;\n"
        "     subcontrol-position: top right;\n"
        "     width: 15px;\n"
        "     color: white;\n"
        "     border-left-width: 0px;\n"
        "     border-left-color: darkgray;\n"
        "     border-left-style: solid; /* just a single line */\n"
        "     border-top-right-radius: 3px; /* same radius as the QComboBox */\n"
        "     border-bottom-right-radius: 3px;\n"
        "     padding-left: 10px;\n"
        " }\n"
        "\n"
        "QComboBox::down-arrow, QSpinBox::down-arrow, QTimeEdit::down-arrow, QDateEdit::down-arrow\n"
        "{\n"
        "     image: url(:/icons/down_arrow.png);\n"
        "     width: 7px;\n"
        "     height: 5px;\n"
        "}"
        "QListView::item {\n"
        "   height: 30px;\n"
        "}"

        )
    #    Version = self.main_widget.Version.currentText()
        self.Version = str(sys.argv[5])
        
        self.main_widget.Version.currentIndexChanged.connect(lambda selected_index, combobox=self.main_widget.Version: self.index_changed_id_by_combobox(combobox, selected_index))
        try:
            self.main_widget.Version.setCurrentText(self.Version)
        except:
            pass
        #self.setCentralWidget(self.main_widget)
        self.setWindowTitle(ShotName + "  Nuke Render")
        self.setFixedSize(349,524)
        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)
        self.main_widget.Undist_Crop_Button.clicked.connect(lambda: Undist_Crop(ShotName,render_Path,jpg_Path,self.Version))
        self.main_widget.Nuke_File_Button.clicked.connect(lambda: Create_Nuke_File_Mixed(ShotName, ThreeD_comp_Path,render_Path,jpg_Path,self.Version ))
        self.main_widget.Nuke_LD_to_UV_Button.clicked.connect(lambda: Create_LD_to_UV(ShotName, ThreeD_comp_Path,render_Path,jpg_Path,self.Version ))
        self.main_widget.Preview_Button.clicked.connect(lambda: NukeFiles_Checker(ShotName, ThreeD_comp_Path,render_Path,jpg_Path,self.Version ))
    def location_on_screen(self):
        #screen = QDesktopWidget().screenGeometry()
        screen = QGuiApplication.primaryScreen()
        screen_geo = screen.geometry()

       # widget = self.geometry()
        Width = screen_geo.width()
        Height = screen_geo.height()
        x = int(Width/2) - self.width()
        y = int(Height/2) - self.height()
        print("x = {}".format(x))
        print("y = {}".format(y))
        self.move(x,y)
    def index_changed_id_by_combobox(self,combobox, selected_index):

    #    print(f"Combobox: {combobox.objectName()}, changed to index:{selected_index}")
    #    print(f"Combobox_Current_Status: {combobox.currentText()}, changed to index:{selected_index}")
        self.Version = combobox.currentText()
        combobox.clearFocus()
app = QApplication.instance()
if app == None:
    app = QApplication(sys.argv)
my_window = MyWindow()
my_window.location_on_screen()
my_window.show()

sys.exit(app.exec_())