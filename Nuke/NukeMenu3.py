import os,re

from Qt import QtWidgets
from Qt import QtCompat
from Qt import QtGui
from Qt import QtCore
from Qt.QtWidgets import QDesktopWidget,QComboBox
#import Qt
import sys
#sys.path.append(r"\\fs3\Sh1\uber\Nuke_Scripts\NukeScripts")
sys.path.append(r"C:\Users\Dame\Desktop\S")
from Nuke_Preview_v018 import *
from Undist_Crop import *
from Create_Nuke_File_LD_MIXED_v002 import *
from Create_Nuke_File_LD_to_UV import *
#from Undist_Crop import Find_JPG
# Form implementation generated from reading ui file 'NukeMenu.ui'
#
# Created by: PyQt6 UI code generator 6.2.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

# ThreeD_comp_Path,render_Path,jpg_Path,ShotName,Version
file_interface = os.path.join(r"C:\Users\Dame\Desktop\S\\", "NukeMenu5_UI.ui")
#ThreeD_comp_Path = r"\\fs3\TPN\CraftyApes\Origami\3d_comp\Shadowbone2_207_207-039-6000_MP1_v001"
#render_Path = r"\\fs3\TPN\CraftyApes\Origami\render\Shadowbone2_207_207-039-6000_MP1_v001"
#jpg_Path = r"\\fs3\TPN\CraftyApes\Origami\input\CRA_Vertigo_2022.11.11\Shadowbone2_207_207-039-6000_MP1_v001\jpg"
#ShotName = r"Shadowbone2_207_207-039-6000_MP1_v001"
#Version = "V001"

ThreeD_comp_Path = r"C:\Users\Dame\Desktop\NUKESTUFF\TPN\FilmLance\DVX\3d_comp\DVX_010_400_BG_V001"
render_Path = r"C:\Users\Dame\Desktop\NUKESTUFF\TPN\FilmLance\DVX\render\DVX_010_400_BG_V001"
jpg_Path = r"C:\Users\Dame\Desktop\NUKESTUFF\TPN\FilmLance\DVX\input\DVX_010_400_BG_V001\Proxy"
ShotName = r"DVX_010_400_BG_V001"
Version = "v002"
# ThreeD_comp_Path = str(sys.argv[1])
# render_Path = str(sys.argv[2])
# jpg_Path = str(sys.argv[3])
# ShotName = str(sys.argv[4])
# Version = str(sys.argv[5])
#---------------------------------------------------------
class MyWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)
        self.render_Path = render_Path
        self.ThreeD_comp_Path = ThreeD_comp_Path
        
        self.main_widget = QtCompat.loadUi(file_interface)
        self.main_widget.Version.setStyleSheet("QComboBox\n"
        "{\n"
        "    subcontrol-origin: padding;\n"
        "    subcontrol-position: top right;\n"
        "    selection-background-color: #111;\n"
        "    selection-color: yellow;\n"
        "    color: white;\n"
        "    font: 10pt 'Candara';\n"
        "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);\n"
        "    border-style: solid;\n"
        "    border: 1px solid #1e1e1e;\n"
        "    border-radius: 5;\n"
        "    padding: 1px 0px 1px 20px;\n"
        "}\n"
        "\n"
        "\n"
        "QComboBox:hover, QPushButton:hover\n"
        "{\n"
        "    border: 1px solid yellow;\n"
        "    color: white;\n"
        "}\n"
        "\n"
        "QComboBox:editable {\n"
        "    background: red;\n"
        "    color: pink;\n"
        "}\n"
        "\n"
        "QComboBox:on\n"
        "{\n"
        "    padding-top: 0px;\n"
        "    color: white;\n"
        "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #2d2d2d, stop: 0.1 #2b2b2b, stop: 0.5 #292929, stop: 0.9 #282828, stop: 1 #252525);\n"
        "    selection-background-color: #ffaa00;\n"
        "}\n"
        "\n"
        "QComboBox:!on\n"
        "{\n"
        "    color: white;\n"
        "    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #666, stop: 0.1 #555, stop: 0.5 #555, stop: 0.9 #444, stop: 1 #333);\n"
        "}\n"
        "\n"
        "QComboBox QAbstractItemView\n"
        "{\n"
        "    border: 2px solid darkgray;\n"
        "    color: black;\n"
        "    selection-background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #111, stop: 1 #333);\n"
        "}\n"
        "\n"
        "QComboBox::drop-down\n"
        "{\n"
        "     subcontrol-origin: padding;\n"
        "     subcontrol-position: top right;\n"
        "     width: 15px;\n"
        "     color: white;\n"
        "     border-left-width: 0px;\n"
        "     border-left-color: darkgray;\n"
        "     border-left-style: solid; /* just a single line */\n"
        "     border-top-right-radius: 3px; /* same radius as the QComboBox */\n"
        "     border-bottom-right-radius: 3px;\n"
        "     padding-left: 10px;\n"
        " }\n"
        "\n"
        "QComboBox::down-arrow, QSpinBox::down-arrow, QTimeEdit::down-arrow, QDateEdit::down-arrow\n"
        "{\n"
        "     image: url(:/icons/down_arrow.png);\n"
        "     width: 7px;\n"
        "     height: 5px;\n"
        "}"
        "QListView::item {\n"
        "   height: 30px;\n"
        "}"

        )
    #    Version = self.main_widget.Version.currentText()
    #    self.Version = str(sys.argv[5])
        self.Redist_Check,self.Undist_Check,self.LD_Check = self.Get_UV_Map_LD_Node_Status()
        self.SetRadio_To_LD()
        self.Version = "v001"
        self.PIS_Status = self.Get_PIS_Status(None,None)
        self.UV_LD_Status = self.Get_UV_LD_Status(None,None)

        
        self.main_widget.PIS_buttonGroup.buttonToggled[QtWidgets.QAbstractButton,bool].connect(self.Get_PIS_Status)
        self.main_widget.UV_LD_buttonGroup.buttonToggled[QtWidgets.QAbstractButton,bool].connect(self.Get_UV_LD_Status)
    #    self.UV_LD_Status_Checked = self.Get_UV_LD_Status()
        self.main_widget.Version.currentIndexChanged.connect(lambda selected_index, combobox=self.main_widget.Version: self.index_changed_id_by_combobox(combobox, selected_index))
        try:
            self.main_widget.Version.setCurrentText(self.Version)
        except:
            pass
        self.setCentralWidget(self.main_widget)
        self.setWindowTitle(ShotName + "  Nuke Render")
        self.setFixedSize(349,698)
        self.setWindowFlags(self.windowFlags() | QtCore.Qt.WindowStaysOnTopHint)
        self.main_widget.Undist_Crop_Button.clicked.connect(    lambda:         Undist_Crop             (ShotName,render_Path,jpg_Path,self.Version))
        self.main_widget.Nuke_File_Button.clicked.connect(      lambda:         Create_Nuke_File_Mixed  (ShotName, ThreeD_comp_Path,render_Path,jpg_Path,self.Version,self.UV_LD_Status ))
        self.main_widget.Nuke_LD_to_UV_Button.clicked.connect(  lambda:         Create_LD_to_UV         (ShotName, ThreeD_comp_Path,render_Path,jpg_Path,self.Version ))
        self.main_widget.Preview_Button.clicked.connect(        lambda:         NukeFiles_Checker       (ShotName, ThreeD_comp_Path,render_Path,jpg_Path,self.Version,self.PIS_Status,self.UV_LD_Status ))#self.UV_LD_Status
        
        
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.check_and_update_status)
        self.timer.start(500)  # Time specified in milliseconds.
        self.check_and_update_status()
        

    def location_on_screen(self):
        screen = QDesktopWidget().screenGeometry()
        widget = self.geometry()
        x = int(screen.width()/2) - widget.width()-200
        y = int(screen.height()/2) - widget.height()
        print("x = {}".format(x))
        print("y = {}".format(y))
        self.move(x,y)
    def index_changed_id_by_combobox(self,combobox, selected_index):

    #    print(f"Combobox: {combobox.objectName()}, changed to index:{selected_index}")
    #    print(f"Combobox_Current_Status: {combobox.currentText()}, changed to index:{selected_index}")
        self.Version = combobox.currentText()
        combobox.clearFocus()
    def Get_PIS_Status(self,btn,checked):
        Children = self.main_widget.PIS_GroupBox.findChildren(QtWidgets.QRadioButton)
        for radio in Children:
            if radio.isChecked() == True:
                self.PIS_Status = radio.text()
                print("PIS_Status = {}".format(self.PIS_Status))
                break
        return self.PIS_Status

    def Get_UV_LD_Status(self,btn,checked):  
        UVChildren = self.main_widget.ShotType_GroupBox.findChildren(QtWidgets.QRadioButton)
        for radio in UVChildren:
            if radio.isChecked() == True:
                self.UV_LD_Status = radio.text()
                print("UV_LD_Status = {}".format(self.UV_LD_Status))
                break
        return self.UV_LD_Status

    def Get_UV_Map_LD_Node_Status(self):     
        UVDistortPath=render_Path + "\\uvmap\\"
        UVContent = os.listdir(UVDistortPath)
        Redist_Check = False
        Undist_Check = False
        LD_Check = False
        if not UVContent:
            print ("No Redist or Undist")
            Redist_Check = False
            Undist_Check = False
            print ("Redist_Check = {}".format(Redist_Check))
        elif UVContent:
            for uv in UVContent:
                if "redi" in uv:
                    Redist_Check = True
                    print ("Redist_Check = {}".format(Redist_Check))
                elif "undi" in uv:
                    Undist_Check = True
                    print ("Undist_Check = {}".format(Undist_Check))


        LDNodePath = ThreeD_comp_Path +  "\\nuke\\"
        if not os.path.exists(LDNodePath):
            original_umask = os.umask(0)
            os.makedirs(LDNodePath,mode=0o777  )
        
        for LD in os.listdir(LDNodePath):
            if "dist_".lower() in LD.lower():
                Split,ext = os.path.splitext(LD)
                SplitDist = Split.split("_")
                for v in SplitDist:
                    if "v0" in v:
                        LastVersion = v
                    
            try:
                LastVersion
            except NameError:
                pass
        for LD in os.listdir(LDNodePath):
            try:
                if "dist_{}".format(LastVersion).lower() in LD.lower():
                #    Create_LD_Node(ShotName, ThreeD_comp_Path,render_Path,jpg_Path,Version)
                    print ("Found")
                    LD_Check = True
                    break
            except:
                pass
        
        print ("LD_Check = {}".format(LD_Check))
        return Redist_Check,Undist_Check,LD_Check
    
    def SetRadio_To_LD(self):
        UVChildren = self.main_widget.ShotType_GroupBox.findChildren(QtWidgets.QRadioButton)
        for radio in UVChildren:
            if self.LD_Check == True:
                if radio.text() == "LD Node":
                    radio.setChecked(True)
            if self.LD_Check == True and self.Redist_Check == True and self.Undist_Check == True:
                if radio.text() == "UV Map":
                    radio.setChecked(True)

    def check_and_update_status(self):
        self.update_uv_map_status()
        self.update_ld_node_status()
        self.update_undist_status()
        self.update_crop_status()

    def find_version(self, name):
        match = re.search(r'.*(v\d{3})', name)
        if match:
            return match.group(1)
        else:
            return None

    def update_uv_map_status(self):
        uv_map_location = os.path.join(self.render_Path, "uvmap")
        files = os.listdir(uv_map_location)

        redi_versions = []
        undi_versions = []

        for f in files:
            if "redi" in f:
                version = self.find_version(f)
                if version:
                    redi_versions.append(version)
            if "undi" in f:
                version = self.find_version(f)
                if version:
                    undi_versions.append(version)

        if redi_versions and undi_versions:
            last_redi_version = max(redi_versions)
            last_undi_version = max(undi_versions)
            self.main_widget.UV_Maps_Status.setStyleSheet("color: green;")
            self.main_widget.UV_Maps_Status.setText(f"(R):{last_redi_version},(U):{last_undi_version}")
            self.main_widget.UV_Maps_Status.setText("{}<sup>R</sup>,{}<sup>U</sup>".format(last_redi_version, last_undi_version))

        elif redi_versions:
            last_redi_version = max(redi_versions)
            self.main_widget.UV_Maps_Status.setStyleSheet("color: orange;")
            self.main_widget.UV_Maps_Status.setText(f"(R):{last_redi_version},(U):None")
            self.main_widget.UV_Maps_Status.setText("{}<sup>R</sup>,{}<sup>U</sup>".format(last_redi_version, "None"))
        elif undi_versions:
            last_undi_version = max(undi_versions)
            self.main_widget.UV_Maps_Status.setStyleSheet("color: orange;")
            self.main_widget.UV_Maps_Status.setText(f"(R):None, (U):{last_undi_version}")
            self.main_widget.UV_Maps_Status.setText("{}<sup>R</sup>,{}<sup>U</sup>".format("None", last_undi_version))
        else:
            self.main_widget.UV_Maps_Status.setStyleSheet("color: red;")
            self.main_widget.UV_Maps_Status.setText("None")

    def update_ld_node_status(self):
        ld_node_location = os.path.join(self.ThreeD_comp_Path, "nuke")
        files = [f for f in os.listdir(ld_node_location) if f.endswith(".nk")]

        ld_versions = []

        for f in files:
            if "dist_" in f:
                version = self.find_version(f)
                if version:
                    ld_versions.append(version)

        if ld_versions:
            last_version = max(ld_versions)
            self.main_widget.LD_Node_Status.setStyleSheet("color: green;")
            self.main_widget.LD_Node_Status.setText(last_version)
        else:
            self.main_widget.LD_Node_Status.setStyleSheet("color: red;")
            self.main_widget.LD_Node_Status.setText("None")

    def update_undist_status(self):
        undist_location = os.path.join(self.render_Path, "undist")
        folders = [f for f in os.listdir(undist_location) if os.path.isdir(os.path.join(undist_location, f))]

        undist_versions = []

        for f in folders:
            split_folder = f.split('_')
            if split_folder[-1] == 'undist':
                version = self.find_version(f)
                if version:
                    undist_versions.append(version)

        if undist_versions:
            last_version = max(undist_versions)
            self.main_widget.Undist_Status.setStyleSheet("color: green;")
            self.main_widget.Undist_Status.setText(last_version)
        else:
            self.main_widget.Undist_Status.setStyleSheet("color: red;")
            self.main_widget.Undist_Status.setText("None")

    def update_crop_status(self):
        crop_location = os.path.join(self.render_Path, "undist")
        folders = [f for f in os.listdir(crop_location) if os.path.isdir(os.path.join(crop_location, f))]

        crop_versions = []

        for f in folders:
            split_folder = f.split('_')
            if split_folder[-1] == 'crop':
                version = self.find_version(f)
                if version:
                    crop_versions.append(version)

        if crop_versions:
            last_version = max(crop_versions)
            self.main_widget.Crop_Status.setStyleSheet("color: green;")
            self.main_widget.Crop_Status.setText(last_version)
        else:
            self.main_widget.Crop_Status.setStyleSheet("color: red;")
            self.main_widget.Crop_Status.setText("None")


    def closeEvent(self, event):
        self.timer.stop()
        event.accept()


my_window = MyWindow()
my_window.location_on_screen()
my_window.show()